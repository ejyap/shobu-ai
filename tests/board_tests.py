import sys
sys.path.insert(0, '../shobu/')
import pytest
import numpy as np
from shobu import Board, Move, BLACK, WHITE

def test_correct_initial_board():
    new_board = Board()
    assert np.array_equal(new_board.boards,  np.array([[[-1., -1., -1., -1.],
                                                [ 0.,  0., 0.,  0.,],
                                                [ 0.,  0.,  0.,  0.,],
                                                [ 1.,  1.,  1., 1.,]],

                                               [[-1., -1., -1., -1.],
                                                [0., 0., 0., 0., ],
                                                [0., 0., 0., 0., ],
                                                [1., 1., 1., 1., ]],

                                               [[-1., -1., -1., -1.],
                                                [0., 0., 0., 0., ],
                                                [0., 0., 0., 0., ],
                                                [1., 1., 1., 1., ]],

                                               [[-1., -1., -1., -1.],
                                                [0., 0., 0., 0., ],
                                                [0., 0., 0., 0., ],
                                                [1., 1., 1., 1., ]]]))

def test_initial_possible_moves():
    new_board = Board()
    num_possible_moves = len(new_board.get_valid_moves())
    assert num_possible_moves == 232

def test_initial_possible_moves():
    new_board = Board()
    num_possible_moves = len(new_board.get_valid_moves(WHITE))
    assert num_possible_moves == 232

def test_possible_moves_for_no_offensive_moves():
    board = Board(np.array([[[0, 0, 1., 1.],
                                                [ 0.,  0., 0.,  0.,],
                                                [ 0.,  0.,  0.,  0.,],
                                                [ -1.,  0,  1., 0,]],

                                               [[0., 0., 0., -1.],
                                                [0., 0., 0., 0., ],
                                                [0., 0., 0., 0., ],
                                                [1., 1., 0., 0., ]],

                                               [[0, 0, 0, 1.],
                                                [0., 0., 0., 0., ],
                                                [-1, 0., 0., 0., ],
                                                [-1., -1., -1., 0, ]],

                                               [[0., 0., 0., -1.],
                                                [0., 0., 0., 0., ],
                                                [1., 0., 0., 0., ],
                                                [1., 0., 1., 0, ]]]))
    board.player = WHITE
    num_possible_moves = len(board.get_valid_moves())
    assert num_possible_moves == 11

def test_make_simple_move():
    board = Board()
    move = Move(2, (3,0), 3, (3,0), (-1,1))
    new_board = board.make_move(move)
    assert np.array_equal(new_board.boards, np.array([[[-1., -1., -1., -1.],
                                                [ 0.,  0., 0.,  0.,],
                                                [ 0.,  0.,  0.,  0.,],
                                                [ 1.,  1.,  1., 1.,]],

                                               [[-1., -1., -1., -1.],
                                                [0., 0., 0., 0., ],
                                                [0., 0., 0., 0., ],
                                                [1., 1., 1., 1., ]],

                                               [[-1., -1., -1., -1.],
                                                [0., 0., 0., 0., ],
                                                [0., 1., 0., 0., ],
                                                [0., 1., 1., 1., ]],

                                               [[-1., -1., -1., -1.],
                                                [0., 0., 0., 0., ],
                                                [0., 1., 0., 0., ],
                                                [0., 1., 1., 1., ]]]))

def test_make_simple_move_mutated():
    board = Board()
    move = Move(2, (3,0), 3, (3,0), (-1,1))
    board = board.make_move(move)
    assert np.array_equal(board.boards, np.array([[[-1., -1., -1., -1.],
                                                [ 0.,  0., 0.,  0.,],
                                                [ 0.,  0.,  0.,  0.,],
                                                [ 1.,  1.,  1., 1.,]],

                                               [[-1., -1., -1., -1.],
                                                [0., 0., 0., 0., ],
                                                [0., 0., 0., 0., ],
                                                [1., 1., 1., 1., ]],

                                               [[-1., -1., -1., -1.],
                                                [0., 0., 0., 0., ],
                                                [0., 1., 0., 0., ],
                                                [0., 1., 1., 1., ]],

                                               [[-1., -1., -1., -1.],
                                                [0., 0., 0., 0., ],
                                                [0., 1., 0., 0., ],
                                                [0., 1., 1., 1., ]]]))
def test_validate_valid_move():
    board = Board(np.array([[[-1., 0, 1, 0],
                            [ 0.,  0., 1,  0.,],
                            [ 1,  1,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, 0, 0, 0],
                            [-1, 1., 0., 0., ],
                            [0., 0., -1., 1., ],
                            [0, 0, 0, 1 ]],

                            [[0, 0, -1., 0],
                            [0., 0., 0., -1., ],
                            [0., -1., 0., 0., ],
                            [1, -1., 0, 1., ]],

                            [[0, 1, 0, -1.],
                            [0., 0., 0., 0., ],
                            [1, 0, 0., -1, ],
                            [0., 0, -1, 0, ]]]))
    move = Move(2,(0,2),1,(2,2),(1,0))
    board.player= WHITE
    assert board.validate_move(move, validate_board_indices=False) == True

def test_validate_invalid_move():
    board = Board(np.array([[[-1., 0, 1, 0],
                            [ 0.,  0., 1,  0.,],
                            [ 1,  1,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, 0, 0, 0],
                            [-1, 1., 0., 0., ],
                            [0., 0., -1., 1., ],
                            [0, 0, 0, 1 ]],

                            [[0, 0, -1., 0],
                            [0., 0., 0., -1., ],
                            [0., -1., 0., 0., ],
                            [1, -1., 0, 1., ]],

                            [[0, 1, 0, -1.],
                            [0., 0., 0., 0., ],
                            [1, 0, 0., -1, ],
                            [0., 0, -1, 0, ]]]))
    move = Move(2,(0,2),1,(1,0),(-1,1))
    assert board.validate_move(move, validate_board_indices=False) == False

def test_validate_invalid_move2():
    board = Board(np.array([[[-1., 0, 1, 0],
                            [ 0.,  0., 1,  0.,],
                            [ 1,  1,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, 0, 0, 0],
                            [-1, 1., 0., 0., ],
                            [0., 0., -1., 1., ],
                            [0, 0, 0, 1 ]],

                            [[0, 0, -1., 0],
                            [0., 0., 0., -1., ],
                            [0., -1., 0., 0., ],
                            [1, -1., 0, 1., ]],

                            [[0, 1, 0, -1.],
                            [0., 0., 0., 0., ],
                            [1, 0, 0., -1, ],
                            [0., 0, -1, 0, ]]]))
    move = Move(2,(0,2),1,(1,0),(-1,1))
    assert board.validate_move(move, validate_board_indices=False) == False

def test_validate_invalid_move_cant_push():
    board = Board(np.array([[[-1., 0, 1, 0],
                            [ 0.,  0., 1,  0.,],
                            [ 1,  1,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, 0, 0, 0],
                            [-1, 1., 0., 0., ],
                            [0., 0., -1., 1., ],
                            [0, 0, 0, 1 ]],

                            [[0, -1, 0., 0],
                            [0., 0., 1., 1., ],
                            [0., -1., 0., 1., ],
                            [1, -1., 0, 1., ]],

                            [[0, 1, 0, -1.],
                            [0., 0., 0., 0., ],
                            [1, 0, 0., -1, ],
                            [0., 0, -1, 0, ]]]))
    move = Move(1,(1,0),2,(0,1),(1,1))
    assert board.validate_move(move, validate_board_indices=False) == False

def test_validate_valid_move2():
    board = Board(np.array([[[-1., 0, 1, 0],
                            [ 0.,  0., 1,  0.,],
                            [ 1,  1,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, 0, 0, 0],
                            [-1, 1., 0., 0., ],
                            [0., 0., -1., 1., ],
                            [0, 0, 0, 1 ]],

                            [[0, 0, -1., 0],
                            [0., 0., 0., -1., ],
                            [0., -1., 0., 0., ],
                            [1, -1., 0, 1., ]],

                            [[0, 1, 0, -1.],
                            [0., 0., 0., 0., ],
                            [1, 0, 0., -1, ],
                            [0., 0, 1, 0, ]]]))
    board.player = WHITE
    move = Move(2,(1,3),3,(2,3),(1,-1))

    assert board.validate_move(move, validate_board_indices=False) == True

def test_validate_valid_move_push_horizontally():
    board = Board(np.array([[[0., -1, -1, 0],
                            [ -1.,  0., 0,  0.,],
                            [ 0,  0,  0.,  -1.,],
                            [ 1,  1,  1, 1]],

                            [[-1, 0, -1, -1],
                            [0, 0, 0., 0., ],
                            [0., 0., 1., 1., ],
                            [1, -1, 0, 1 ]],

                            [[0, 0, -1., 0],
                            [0., 0., 0., -1., ],
                            [0., -1., 0., 0., ],
                            [1, -1., 0, 1., ]],

                            [[0, 1, 0, -1.],
                            [0., 0., 0., 0., ],
                            [1, 0, 0., -1, ],
                            [0., 0, 1, 0, ]]]))
    board.player= WHITE
    move = Move(0,(2,3),1,(3,1),(0,-1))

    assert board.validate_move(move) == True

def test_validate_invalid_move_same_board_index():
    board = Board(np.array([[[0., -1, -1, 0],
                            [ -1.,  0., 0,  0.,],
                            [ 0,  0,  0.,  -1.,],
                            [ 1,  1,  1, 1]],

                            [[-1, 0, -1, -1],
                            [0, 0, 0., 0., ],
                            [0., 0., 1., 1., ],
                            [1, -1, 0, 1 ]],

                            [[0, 0, -1., 0],
                            [0., 0., 0., -1., ],
                            [0., -1., 0., 0., ],
                            [1, -1., 0, 1., ]],

                            [[0, 1, 0, -1.],
                            [0., 0., 0., 0., ],
                            [1, 0, 0., -1, ],
                            [0., 0, 1, 0, ]]]))
    board.player=WHITE
    move = Move(1,(0,0),1,(0,1),(1,0))

    assert board.validate_move(move) == False

def test_validate_invalid_move_wrong_board():
    board = Board(np.array([[[-1., 0, 1, 0],
                            [ 0.,  0., 1,  0.,],
                            [ 1,  1,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, 0, 0, 0],
                            [-1, 1., 0., 0., ],
                            [0., 0., -1., 1., ],
                            [0, 0, 0, 1 ]],

                            [[0, 0, -1., 0],
                            [0., 0., 0., -1., ],
                            [0., -1., 0., 0., ],
                            [1, -1., 0, 1., ]],

                            [[0, 1, 0, -1.],
                            [0., 0., 0., 0., ],
                            [1, 0, 0., -1, ],
                            [0., 0, -1, 0, ]]]))
    move = Move(2,(0,2),0,(0,0),(1,0))
    board.player = WHITE
    assert board.validate_move(move) == False

def test_validate_invalid_move_with_no_offensive_move():
    board = Board(np.array([[[0, 0, -1., -1.],
                                                [ 0.,  0., 0.,  0.,],
                                                [ 0.,  0.,  0.,  0.,],
                                                [ 1.,  0,  -1., 0,]],

                                               [[0., 0., 0., 1.],
                                                [0., 0., 0., 0., ],
                                                [0., 0., 0., 0., ],
                                                [-1., -1., 0., 0., ]],

                                               [[0, 0, 0, -1.],
                                                [0., 0., 0., 0., ],
                                                [1, 0., 0., 0., ],
                                                [1., 1., 1., 0, ]],

                                               [[0., 0., 0., 1.],
                                                [0., 0., 0., 0., ],
                                                [-1., 0., 0., 0., ],
                                                [-1., 0., -1., 0, ]]]))
    move = Move(1,(0,3),None,None,(-2,0))
    assert board.validate_move(move, validate_board_indices=False) == False

def test_validate_valid_move_with_no_offensive_move():
    board = Board(np.array([[[0, 0, -1., -1.],
                                                [ 0.,  0., 0.,  0.,],
                                                [ 0.,  0.,  0.,  0.,],
                                                [ 1.,  0,  -1., 0,]],

                                               [[0., 0., 0., 1.],
                                                [0., 0., 0., 0., ],
                                                [0., 0., 0., 0., ],
                                                [-1., -1., 0., 0., ]],

                                               [[0, 0, 0, -1.],
                                                [0., 0., 0., 0., ],
                                                [1, 0., 0., 0., ],
                                                [1., 1., 1., 0, ]],

                                               [[0., 0., 0., 1.],
                                                [0., 0., 0., 0., ],
                                                [-1., 0., 0., 0., ],
                                                [-1., 0., -1., 0, ]]]))
    move = Move(1,(0,3),None,None,(2,0))
    assert board.validate_move(move, validate_board_indices=False) == True

def test_validate_valid_move_can_push():
    board = Board(np.array([[[-1., 0, 1, 0],
                            [ 0.,  0., 1,  0.,],
                            [ 1,  1,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, 0, 0, 0],
                            [-1, 1., 0., 0., ],
                            [0., 0., -1., 1., ],
                            [0, 0, 0, 1 ]],

                            [[0, -1, 0., 0],
                            [0., 0., 1., 1., ],
                            [0., -1., 0., 0, ],
                            [1, -1., 0, 1., ]],

                            [[0, 1, 0, -1.],
                            [0., 0., 0., 0., ],
                            [1, 0, 0., -1, ],
                            [0., 0, -1, 0, ]]]))
    board.player = WHITE
    move = Move(1,(1,0),2,(0,1),(1,1))
    assert board.validate_move(move, validate_board_indices=False) == True

def test_validate_move_can_push_once():
    board = Board(np.array([[[-1, 0, 0, 0],
                            [ 0.,  0, 0,  0.,],
                            [ 0,  1,  0.,  0.,],
                            [ 0,  0,  1, 0]],

                            [[0, 0, 1, 1],
                            [0, 0, 0, 0., ],
                            [0., 0., -1, -1, ],
                            [0, 0, 0, -1]],

                            [[-1, 0, 0, 0],
                            [1, 0, 0., 0, ],
                            [0., 1, 0., 1, ],
                            [0, 0, 0, 1, ]],

                            [[1, 1, 0, 1],
                            [0, 0, 0, 0., ],
                            [0, 0, 0., 0, ],
                            [0., 0, 0, -1, ]]]))
    board.player = WHITE
    move = Move(1, (2,2), 2, (0,0), (1, 0))
    assert board.validate_move(move, validate_board_indices=False) == True

def test_validate_move_can_push_and_capture():
    board = Board(np.array([[[0, 0, 0, 0],
                            [ 0.,  -1, 1,  0.,],
                            [ 0,  1,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, 0, 0, -1],
                            [-1, 1, 0, 0., ],
                            [0., 0., 0, 0, ],
                            [-1, 0, 0, 0 ]],

                            [[-1, 0, 0, 0],
                            [-1, 1, 0., 0, ],
                            [0., 0, 0., 0., ],
                            [0, 1., 0, 0, ]],

                            [[1, 0, 0, 0],
                            [0, -1, 0, 0., ],
                            [0, 0, 0., 0, ],
                            [0., 0, 0, 0, ]]]))
    move = Move(1, (1,1), 3, (0,0), (2, 2))
    assert board.validate_move(move, validate_board_indices=False) == True

def test_move_does_not_capture_pushes_once_horizontally():
    board = Board(np.array([[[0, 0, 0, 0],
                            [ 0.,  -1, 1,  0.,],
                            [ 0,  0,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, 0, 0, -1],
                            [-1, 0, 1, 0., ],
                            [0., 0., 0, 0, ],
                            [-1, 0, 0, 0 ]],

                            [[-1, 0, 0, 0],
                            [-1, 1, 0., 0, ],
                            [0., 0, 0., 0., ],
                            [0, 1., 0, 0, ]],

                            [[0, 0, 0, 0],
                            [1, -1, 0, 0., ],
                            [0, 0, 0., 0, ],
                            [0., 0, 0, 0, ]]]))
    move = Move(0, (1,2),3,(1,0),(0, 1))
    assert board.does_move_capture(move) == (False, None)

def test_move_does_not_capture_pushes_once_vertically():
    board = Board(np.array([[[-1, 0, 0, 0],
                            [ 0.,  0, 0,  0.,],
                            [ 0,  1,  0.,  0.,],
                            [ 0,  0,  1, 0]],

                            [[0, 0, 1, 1],
                            [0, 0, 0, 0., ],
                            [0., 0., -1, -1, ],
                            [0, 0, 0, -1]],

                            [[-1, 0, 0, 0],
                            [1, 0, 0., 0, ],
                            [0., 1, 0., 1, ],
                            [0, 0, 0, 1, ]],

                            [[1, 1, 0, 1],
                            [0, 0, 0, 0., ],
                            [0, 0, 0., 0, ],
                            [0., 0, 0, -1, ]]]))
    move = Move(1, (2,2), 2, (0,0), (1, 0))
    assert board.does_move_capture(move) == (False, None)

def test_move_does_not_capture_pushes_twice_diagonally():
    board = Board(np.array([[[-1, 0, 0, 0],
                            [ 0.,  0, 0,  0.,],
                            [ 0,  1,  0.,  0.,],
                            [ 0,  0,  1, 0]],

                            [[-1, 0, 1, 1],
                            [0, 0, 0, 0., ],
                            [0., 0., 0, -1, ],
                            [0, 0, 0, -1]],

                            [[0, 0, 0, 0],
                            [1, -1, 0., 0, ],
                            [0., 1, 0., 1, ],
                            [0, 0, 0, 1, ]],

                            [[1, 1, 0, 1],
                            [0, 0, 0, 0., ],
                            [0, 0, 0., 0, ],
                            [0., 0, 0, -1, ]]]))
    move = Move(1, (0,0), 2, (1,1), (2, 2))
    assert board.does_move_capture(move) == (True, (3,3))

def test_move_does_not_capture_pushes_twice_diagonally_immediately():
    board = Board(np.array([[[-1, 0, 0, 0],
                            [ 0.,  0, 0,  0.,],
                            [ 0,  1,  0.,  0.,],
                            [ 0,  0,  1, 0]],

                            [[-1, 0, 1, 1],
                            [0, 0, 0, 0., ],
                            [0., 0., 0, -1, ],
                            [0, 0, 0, -1]],

                            [[0, 0, 0, 0],
                            [1, -1, 0., 0, ],
                            [0., 1, 1, 1, ],
                            [0, 0, 0, 0, ]],

                            [[1, 1, 0, 1],
                            [0, 0, 0, 0., ],
                            [0, 0, 0., 0, ],
                            [0., 0, 0, -1, ]]]))
    move = Move(1, (0,0), 2, (1,1), (2, 2))
    assert board.does_move_capture(move) == (True, (2,2))

def test_make_move_pushes_twice_and_does_not_capture():
    board = Board(np.array([[[0, 0, 0, 0],
                            [ 0.,  -1, 1,  0.,],
                            [ 0,  1,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, 0, 0, -1],
                            [-1, 1, 0, 0., ],
                            [0., 0., 0, 0, ],
                            [-1, 0, 0, 0 ]],

                            [[-1, 0, 0, 0],
                            [-1, 1, 0., 0, ],
                            [0., 0, 0., 0., ],
                            [0, 1., 0, 0, ]],

                            [[1, 0, 0, 0],
                            [0, -1, 0, 0., ],
                            [0, 0, 0., 0, ],
                            [0., 0, 0, 0, ]]]))
    move = Move(1, (1,1), 3, (0,0), (2, 2))
    assert board.does_move_capture(move) == (False, None)

def test_make_move_pushes_once_horizontally():
    board = Board(np.array([[[0, 0, 0, 0],
                            [ 0.,  -1, 1,  0.,],
                            [ 0,  0,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, 0, 0, -1],
                            [-1, 0, 1, 0., ],
                            [0., 0., 0, 0, ],
                            [-1, 0, 0, 0 ]],

                            [[-1, 0, 0, 0],
                            [-1, 1, 0., 0, ],
                            [0., 0, 0., 0., ],
                            [0, 1., 0, 0, ]],

                            [[0, 0, 0, 0],
                            [1, -1, 0, 0., ],
                            [0, 0, 0., 0, ],
                            [0., 0, 0, 0, ]]]))
    move = Move(0, (1,2),3,(1,0),(0, 1))
    new_board = board.make_move(move)
    assert np.array_equal(new_board.boards, np.array([[[0, 0, 0, 0],
                            [ 0.,  -1, 0,  1.,],
                            [ 0,  0,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, 0, 0, -1],
                            [-1, 0, 1, 0., ],
                            [0., 0., 0, 0, ],
                            [-1, 0, 0, 0 ]],

                            [[-1, 0, 0, 0],
                            [-1, 1, 0., 0, ],
                            [0., 0, 0., 0., ],
                            [0, 1., 0, 0, ]],

                            [[0, 0, 0, 0],
                            [0., 1, -1, 0, ],
                            [0, 0, 0., 0, ],
                            [0., 0, 0, 0, ]]]))

def test_make_move_pushes_once_vertically():
    board = Board(np.array([[[-1, 0, 0, 0],
                            [ 0.,  0, 0,  0.,],
                            [ 0,  1,  0.,  0.,],
                            [ 0,  0,  1, 0]],

                            [[0, 0, 1, 1],
                            [0, 0, 0, 0., ],
                            [0., 0., -1, -1, ],
                            [0, 0, 0, -1]],

                            [[-1, 0, 0, 0],
                            [1, 0, 0., 0, ],
                            [0., 1, 0., 1, ],
                            [0, 0, 0, 1, ]],

                            [[1, 1, 0, 1],
                            [0, 0, 0, 0., ],
                            [0, 0, 0., 0, ],
                            [0., 0, 0, -1, ]]]))
    move = Move(1, (2,2), 2, (0,0), (1, 0))
    new_board = board.make_move(move)
    assert np.array_equal(new_board.boards, np.array([[[-1, 0, 0, 0],
                            [ 0.,  0, 0,  0.,],
                            [ 0,  1,  0.,  0.,],
                            [ 0,  0,  1, 0]],

                            [[0, 0, 1, 1],
                            [0, 0, 0, 0., ],
                            [0., 0., 0, -1, ],
                            [0, 0, -1, -1]],

                            [[0, 0, 0, 0],
                            [-1, 0, 0., 0, ],
                            [1., 1, 0., 1, ],
                            [0, 0, 0, 1, ]],

                            [[1, 1, 0, 1],
                            [0, 0, 0, 0., ],
                            [0, 0, 0., 0, ],
                            [0., 0, 0, -1, ]]]))

def test_make_move_pushes_twice_and_does_not_capture():
    board = Board(np.array([[[0, 0, 0, 0],
                            [ 0.,  -1, 1,  0.,],
                            [ 0,  1,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, 0, 0, -1],
                            [-1, 1, 0, 0., ],
                            [0., 0., 0, 0, ],
                            [-1, 0, 0, 0 ]],

                            [[-1, 0, 0, 0],
                            [-1, 1, 0., 0, ],
                            [0., 0, 0., 0., ],
                            [0, 1., 0, 0, ]],

                            [[1, 0, 0, 0],
                            [0, -1, 0, 0., ],
                            [0, 0, 0., 0, ],
                            [0., 0, 0, 0, ]]]))
    move = Move(1, (1,1), 3, (0,0), (2, 2))
    new_board = board.make_move(move)
    assert np.array_equal(new_board.boards, np.array([[[0, 0, 0, 0],
                            [ 0.,  -1, 1,  0.,],
                            [ 0,  1,  0.,  0,],
                            [ 0,  0,  0, 0]],

                            [[0, 0, 0, -1],
                            [-1, 0, 0, 0., ],
                            [0., 0., 0, 0, ],
                            [-1, 0, 0, 1 ]],

                            [[-1, 0, 0, 0],
                            [-1, 1, 0., 0, ],
                            [0., 0, 0., 0., ],
                            [0, 1., 0, 0, ]],

                            [[0, 0, 0, 0],
                            [0., 0, 0, 0, ],
                            [0, 0, 1., 0, ],
                            [0., 0, 0, -1, ]]]))

def test_make_move_pushes_once_and_captures():
    board = Board(np.array([[[0, 0, 0, 0],
                            [ 0.,  -1, 1,  0.,],
                            [ 0,  1,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, 0, 0, -1],
                            [-1, 0, 1, 0., ],
                            [0., 0., 0, 0, ],
                            [-1, 0, 0, 0 ]],

                            [[-1, 0, 0, 0],
                            [-1, 1, 0., 0, ],
                            [0., 0, 0., 0., ],
                            [0, 1., 0, 0, ]],

                            [[0, 0, 0, 0],
                            [0., 1, -1, 0., ],
                            [0, 0, 1, 0, ],
                            [0., 0, 0, -1, ]]]))
    move = Move(0, (2,1), 3, (2,2), (1, 1))
    new_board = board.make_move(move)
    assert np.array_equal(new_board.boards, np.array([[[0, 0, 0, 0],
                            [ 0.,  -1, 1,  0.,],
                            [ 0,  0,  0.,  0,],
                            [ 0,  0,  1, 0]],

                            [[0, 0, 0, -1],
                            [-1, 0, 1, 0., ],
                            [0., 0., 0, 0, ],
                            [-1, 0, 0, 0 ]],

                            [[-1, 0, 0, 0],
                            [-1, 1, 0., 0, ],
                            [0., 0, 0., 0., ],
                            [0, 1., 0, 0, ]],

                            [[0, 0, 0, 0],
                            [0., 1, -1, 0, ],
                            [0, 0, 0., 0, ],
                            [0., 0, 0, 1, ]]]))

def test_move_does_capture_pushes_once_and_captures():
    board = Board(np.array([[[0, 0, 0, 0],
                            [ 0.,  -1, 1,  0.,],
                            [ 0,  1,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, 0, 0, -1],
                            [-1, 0, 1, 0., ],
                            [0., 0., 0, 0, ],
                            [-1, 0, 0, 0 ]],

                            [[-1, 0, 0, 0],
                            [-1, 1, 0., 0, ],
                            [0., 0, 0., 0., ],
                            [0, 1., 0, 0, ]],

                            [[0, 0, 0, 0],
                            [0., 1, -1, 0., ],
                            [0, 0, 1, 0, ],
                            [0., 0, 0, -1, ]]]))
    move = Move(0, (2,1), 3, (2,2), (1, 1))
    assert board.does_move_capture(move) == (True, (3,3))

def test_make_move_pushes_once_and_does_not_capture():
    board = Board(np.array([[[0, 0, 0, 0],
                            [ 0.,  -1, 1,  0.,],
                            [ 0,  1,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, 0, 0, -1],
                            [-1, 0, 1, 0., ],
                            [0., 0., 0, 0, ],
                            [-1, 0, 0, 0 ]],

                            [[-1, 0, 0, 0],
                            [-1, 1, 0., 0, ],
                            [0., 0, 0., 0., ],
                            [0, 1., 0, 0, ]],

                            [[0, 0, 0, 0],
                            [0., 1, -1, 0., ],
                            [0, 0, -1, 0, ],
                            [0., 0, 0, 0, ]]]))
    move = Move(0, (2,1), 3, (1,1), (1, 1))
    new_board = board.make_move(move)
    assert np.array_equal(new_board.boards, np.array([[[0, 0, 0, 0],
                            [ 0.,  -1, 1,  0.,],
                            [ 0,  0,  0.,  0,],
                            [ 0,  0,  1, 0]],

                            [[0, 0, 0, -1],
                            [-1, 0, 1, 0., ],
                            [0., 0., 0, 0, ],
                            [-1, 0, 0, 0 ]],

                            [[-1, 0, 0, 0],
                            [-1, 1, 0., 0, ],
                            [0., 0, 0., 0., ],
                            [0, 1., 0, 0, ]],

                            [[0, 0, 0, 0],
                            [0., 0, -1, 0, ],
                            [0, 0, 1., 0, ],
                            [0., 0, 0, -1, ]]]))

def test_does_move_capture_true():
    board = Board(np.array([[[0, 0, 0, 0],
                             [0., -1, 1, 0., ],
                             [0, 1, 0., 0., ],
                             [0, 0, 0, 0]],

                            [[0, 0, 0, -1],
                             [-1, 0, 1, 0., ],
                             [0., 0., 0, 0, ],
                             [-1, 0, 0, 0]],

                            [[-1, 0, 0, 0],
                             [-1, 1, 0., 0, ],
                             [0., 0, 0., 0., ],
                             [0, 1., 0, 0, ]],

                            [[0, 0, 0, 0],
                             [0., 1, -1, 0., ],
                             [0, 0, 1, 0, ],
                             [0., 0, 0, -1, ]]]))
    move = Move(0, (2, 1), 3, (2, 2), (1, 1))
    assert board.does_move_capture(move) == (True, (3,3))

def test_validate_invalid_diagonal_double_push():
    board = Board(np.array([[[0, 0, 0, 0],
                            [ 0.,  -1, 1,  0.,],
                            [ 0,  1,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, -1, -1, -1],
                            [0, 0, 0, 0., ],
                            [0., 0., -1, 0, ],
                            [1, 1, 1, 1 ]],

                            [[-1, 0, -1, -1],
                            [0, 0, 1., 0, ],
                            [0., 0, 0., -1., ],
                            [1, 1., 0, 0, ]],

                            [[1, 0, 0, 0],
                            [0, -1, 0, 0., ],
                            [0, 0, 0., 0, ],
                            [0., 0, 0, 0, ]]]))
    board.player = WHITE
    move = Move(1, (0,3), 2, (0,3), (2, -2))
    assert board.validate_move(move) == False

def test_validate_invalid_diagonal_double_push2():
    board = Board(np.array([[[0, 0, 0, 0],
                            [ 0.,  -1, 1,  0.,],
                            [ 0,  1,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, -1, -1, -1],
                            [0, 0, 0, 0., ],
                            [0., 0., -1, 0, ],
                            [1, 1, 1, 1 ]],

                            [[-1, 0, -1, -1],
                            [0, 0, 1., 0, ],
                            [0., 1, 0., -1., ],
                            [0, 1., 0, 0, ]],

                            [[1, 0, 0, 0],
                            [0, -1, 0, 0., ],
                            [0, 0, 0., 0, ],
                            [0., 0, 0, 0, ]]]))
    board.player = WHITE
    move = Move(1, (0,3), 2, (0,3), (2, -2))
    assert board.validate_move(move) == False

def test_validate_invalid_diagonal_double_push3():
    board = Board(np.array([[[0, 0, 0, 0],
                            [ 0.,  -1, 1,  0.,],
                            [ 0,  1,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, -1, -1, -1],
                            [0, 0, 0, 0., ],
                            [0., 0., -1, 0, ],
                            [1, 1, 1, 1 ]],

                            [[-1, 0, -1, -1],
                            [0, 0, 0., 0, ],
                            [0., 1, 0., -1., ],
                            [1, 1., 0, 0, ]],

                            [[1, 0, 0, 0],
                            [0, -1, 0, 0., ],
                            [0, 0, 0., 0, ],
                            [0., 0, 0, 0, ]]]))
    board.player = WHITE
    move = Move(1, (0,3), 2, (0,3), (2, -2))
    assert board.validate_move(move) == False

def test_validate_invalid_vertical_double_push():
    board = Board(np.array([[[0, 0, 0, 0],
                            [ 0.,  -1, 1,  0.,],
                            [ 0,  1,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, -1, -1, -1],
                            [0, 0, 0, 0., ],
                            [0., 0., -1, 0, ],
                            [1, 1, 1, 1 ]],

                            [[-1, 0, -1, -1],
                            [0, 0, 1., 1, ],
                            [0., 1, 0., 0., ],
                            [0, 1., 0, 1, ]],

                            [[1, 0, 0, 0],
                            [0, -1, 0, 0., ],
                            [0, 0, 0., 0, ],
                            [0., 0, 0, 0, ]]]))
    board.player = WHITE
    move = Move(1, (0,3), 2, (0,3), (2, 0))
    assert board.validate_move(move) == False

def test_validate_invalid_vertical_double_push2():
    board = Board(np.array([[[0, 0, 0, 0],
                            [ 0.,  -1, 1,  0.,],
                            [ 0,  1,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, -1, -1, -1],
                            [0, 0, 0, 0., ],
                            [0., 0., -1, 0, ],
                            [1, 1, 1, 1 ]],

                            [[-1, 0, -1, -1],
                            [0, 0, 1., 0, ],
                            [0., 1, 0., 1., ],
                            [0, 1., 0, 1, ]],

                            [[1, 0, 0, 0],
                            [0, -1, 0, 0., ],
                            [0, 0, 0., 0, ],
                            [0., 0, 0, 0, ]]]))
    board.player = WHITE
    move = Move(1, (0,3), 2, (0,3), (2, 0))
    assert board.validate_move(move) == False

def test_does_move_capture_false():
    board = Board(np.array([[[0, 0, 0, 0],
                            [ 0.,  -1, 1,  0.,],
                            [ 0,  1,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, 0, 0, -1],
                            [-1, 0, 1, 0., ],
                            [0., 0., 0, 0, ],
                            [-1, 0, 0, 0 ]],

                            [[-1, 0, 0, 0],
                            [-1, 1, 0., 0, ],
                            [0., 0, 0., 0., ],
                            [0, 1., 0, 0, ]],

                            [[0, 0, 0, 0],
                            [0., 1, -1, 0., ],
                            [0, 0, -1, 0, ],
                            [0., 0, 0, 0, ]]]))
    move = Move(0, (2,1), 3, (1,1), (1, 1))
    assert board.does_move_capture(move) == (False, None)

def test_make_move_pushes_twice_and_captures():
    board = Board(np.array([[[0, 0, 0, 0],
                            [ 0.,  -1, 1,  0.,],
                            [ 0,  1,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, 0, 0, -1],
                            [-1, 0, 1, 0., ],
                            [0., 0., 0, 0, ],
                            [-1, 0, 0, 0 ]],

                            [[-1, 0, 0, 0],
                            [-1, 1, 0., 0, ],
                            [0., 0, 0., 0., ],
                            [0, 1., 0, 0, ]],

                            [[0, 0, 0, 0],
                            [0., 1, -1, 0., ],
                            [0, 0, 0., 0, ],
                            [0., 0, 0, 0, ]]]))
    move = Move(0, (2,1), 3, (1,1), (0, 2))
    new_board = board.make_move(move)
    assert np.array_equal(new_board.boards, np.array([[[0, 0, 0, 0],
                            [ 0.,  -1, 1,  0.,],
                            [ 0,  0,  0.,  1,],
                            [ 0,  0,  0, 0]],

                            [[0, 0, 0, -1],
                            [-1, 0, 1, 0., ],
                            [0., 0., 0, 0, ],
                            [-1, 0, 0, 0 ]],

                            [[-1, 0, 0, 0],
                            [-1, 1, 0., 0, ],
                            [0., 0, 0., 0., ],
                            [0, 1., 0, 0, ]],

                            [[0, 0, 0, 0],
                            [0., 0, 0, 1, ],
                            [0, 0, 0., 0, ],
                            [0., 0, 0, 0, ]]]))

def test_move_does_capture_pushes_twice_and_captures():
    board = Board(np.array([[[0, 0, 0, 0],
                            [ 0.,  -1, 1,  0.,],
                            [ 0,  1,  0.,  0.,],
                            [ 0,  0,  0, 0]],

                            [[0, 0, 0, -1],
                            [-1, 0, 1, 0., ],
                            [0., 0., 0, 0, ],
                            [-1, 0, 0, 0 ]],

                            [[-1, 0, 0, 0],
                            [-1, 1, 0., 0, ],
                            [0., 0, 0., 0., ],
                            [0, 1., 0, 0, ]],

                            [[0, 0, 0, 0],
                            [0., 1, -1, 0., ],
                            [0, 0, 0., 0, ],
                            [0., 0, 0, 0, ]]]))
    move = Move(0, (2,1), 3, (1,1), (0, 2))
    assert board.does_move_capture(move) == (True, (1,2))

def test_winner_black():
    board = Board(np.array([[[-1., -1., -1., -1.],
                                                [ 0.,  0., 0.,  0.,],
                                                [ 0.,  0.,  0.,  0.,],
                                                [ 1.,  1.,  1., 1.,]],

                                               [[-1., -1., -1., -1.],
                                                [0., 0., 0., 0., ],
                                                [0., 0., 0., 0., ],
                                                [0, 0, 0, 0, ]],

                                               [[-1., -1., -1., -1.],
                                                [0., 0., 0., 0., ],
                                                [0., 1., 0., 0., ],
                                                [0., 1., 1., 1., ]],

                                               [[-1., -1., -1., -1.],
                                                [0., 0., 0., 0., ],
                                                [0., 1., 0., 0., ],
                                                [0., 1., 1., 1., ]]]))

    assert board.check_goal_state() == -1

def test_winner_white():
    board = Board()
    board = Board(np.array([[[-1., -1., -1., -1.],
                                                [ 0.,  0., 0.,  0.,],
                                                [ 0.,  0.,  0.,  0.,],
                                                [ 1.,  1.,  1., 1.,]],

                                               [[-1., -1., -1., -1.],
                                                [0., 0., 0., 0., ],
                                                [0., 0., 0., 0., ],
                                                [1, 1, 1, 1, ]],

                                               [[0, 0, 0., 0],
                                                [0., 0., 0., 0., ],
                                                [0., 1., 0., 0., ],
                                                [0., 1., 1., 1., ]],

                                               [[-1., -1., -1., -1.],
                                                [0., 0., 0., 0., ],
                                                [0., 1., 0., 0., ],
                                                [0., 1., 1., 1., ]]]))

    assert board.check_goal_state() == 1

def test_no_winner():
    board = Board()
    board = Board(np.array([[[-1., -1., -1., -1.],
                                                [ 0.,  0., 0.,  0.,],
                                                [ 0.,  0.,  0.,  0.,],
                                                [ 1.,  1.,  1., 1.,]],

                                               [[-1., -1., -1., -1.],
                                                [0., 0., 0., 0., ],
                                                [0., 0., 0., 0., ],
                                                [1, 1, 1, 1, ]],

                                               [[-1, 0, 0., 0],
                                                [0., 0., 0., 0., ],
                                                [0., 1., 0., 0., ],
                                                [0., 1., 1., 1., ]],

                                               [[-1., -1., -1., -1.],
                                                [0., 0., 0., 0., ],
                                                [0., 1., 0., 0., ],
                                                [0., 1., 1., 1., ]]]))

    assert board.check_goal_state() == 0



def test_out_of_bounds_move():
    board = Board()
    move = Move(0, (0,0), 1, (0,0), (-1,-1))
    assert board.validate_move(move, validate_board_indices=False) == False